// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogix/alerts/v2/alert_condition.proto

package v2

import (
	v1 "github.com/coralogix/coralogix-sdk-demo/alerts/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlertCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Condition:
	//	*AlertCondition_Immediate
	//	*AlertCondition_LessThan
	//	*AlertCondition_MoreThan
	//	*AlertCondition_MoreThanUsual
	//	*AlertCondition_NewValue
	//	*AlertCondition_Flow
	//	*AlertCondition_UniqueCount
	Condition isAlertCondition_Condition `protobuf_oneof:"condition"`
}

func (x *AlertCondition) Reset() {
	*x = AlertCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertCondition) ProtoMessage() {}

func (x *AlertCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertCondition.ProtoReflect.Descriptor instead.
func (*AlertCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{0}
}

func (m *AlertCondition) GetCondition() isAlertCondition_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *AlertCondition) GetImmediate() *ImmediateCondition {
	if x, ok := x.GetCondition().(*AlertCondition_Immediate); ok {
		return x.Immediate
	}
	return nil
}

func (x *AlertCondition) GetLessThan() *LessThanCondition {
	if x, ok := x.GetCondition().(*AlertCondition_LessThan); ok {
		return x.LessThan
	}
	return nil
}

func (x *AlertCondition) GetMoreThan() *MoreThanCondition {
	if x, ok := x.GetCondition().(*AlertCondition_MoreThan); ok {
		return x.MoreThan
	}
	return nil
}

func (x *AlertCondition) GetMoreThanUsual() *MoreThanUsualCondition {
	if x, ok := x.GetCondition().(*AlertCondition_MoreThanUsual); ok {
		return x.MoreThanUsual
	}
	return nil
}

func (x *AlertCondition) GetNewValue() *NewValueCondition {
	if x, ok := x.GetCondition().(*AlertCondition_NewValue); ok {
		return x.NewValue
	}
	return nil
}

func (x *AlertCondition) GetFlow() *FlowCondition {
	if x, ok := x.GetCondition().(*AlertCondition_Flow); ok {
		return x.Flow
	}
	return nil
}

func (x *AlertCondition) GetUniqueCount() *UniqueCountCondition {
	if x, ok := x.GetCondition().(*AlertCondition_UniqueCount); ok {
		return x.UniqueCount
	}
	return nil
}

type isAlertCondition_Condition interface {
	isAlertCondition_Condition()
}

type AlertCondition_Immediate struct {
	Immediate *ImmediateCondition `protobuf:"bytes,1,opt,name=immediate,proto3,oneof"`
}

type AlertCondition_LessThan struct {
	LessThan *LessThanCondition `protobuf:"bytes,2,opt,name=less_than,json=lessThan,proto3,oneof"`
}

type AlertCondition_MoreThan struct {
	MoreThan *MoreThanCondition `protobuf:"bytes,3,opt,name=more_than,json=moreThan,proto3,oneof"`
}

type AlertCondition_MoreThanUsual struct {
	MoreThanUsual *MoreThanUsualCondition `protobuf:"bytes,4,opt,name=more_than_usual,json=moreThanUsual,proto3,oneof"`
}

type AlertCondition_NewValue struct {
	NewValue *NewValueCondition `protobuf:"bytes,5,opt,name=new_value,json=newValue,proto3,oneof"`
}

type AlertCondition_Flow struct {
	Flow *FlowCondition `protobuf:"bytes,6,opt,name=flow,proto3,oneof"`
}

type AlertCondition_UniqueCount struct {
	UniqueCount *UniqueCountCondition `protobuf:"bytes,7,opt,name=unique_count,json=uniqueCount,proto3,oneof"`
}

func (*AlertCondition_Immediate) isAlertCondition_Condition() {}

func (*AlertCondition_LessThan) isAlertCondition_Condition() {}

func (*AlertCondition_MoreThan) isAlertCondition_Condition() {}

func (*AlertCondition_MoreThanUsual) isAlertCondition_Condition() {}

func (*AlertCondition_NewValue) isAlertCondition_Condition() {}

func (*AlertCondition_Flow) isAlertCondition_Condition() {}

func (*AlertCondition_UniqueCount) isAlertCondition_Condition() {}

type ImmediateCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImmediateCondition) Reset() {
	*x = ImmediateCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmediateCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmediateCondition) ProtoMessage() {}

func (x *ImmediateCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmediateCondition.ProtoReflect.Descriptor instead.
func (*ImmediateCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{1}
}

type LessThanCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *LessThanCondition) Reset() {
	*x = LessThanCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LessThanCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LessThanCondition) ProtoMessage() {}

func (x *LessThanCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LessThanCondition.ProtoReflect.Descriptor instead.
func (*LessThanCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{2}
}

func (x *LessThanCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type MoreThanCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters       *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
	EvaluationWindow *v1.EvaluationWindow `protobuf:"varint,2,opt,name=evaluation_window,json=evaluationWindow,proto3,enum=com.coralogix.alerts.v1.EvaluationWindow,oneof" json:"evaluation_window,omitempty"`
}

func (x *MoreThanCondition) Reset() {
	*x = MoreThanCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoreThanCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoreThanCondition) ProtoMessage() {}

func (x *MoreThanCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoreThanCondition.ProtoReflect.Descriptor instead.
func (*MoreThanCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{3}
}

func (x *MoreThanCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *MoreThanCondition) GetEvaluationWindow() v1.EvaluationWindow {
	if x != nil && x.EvaluationWindow != nil {
		return *x.EvaluationWindow
	}
	return v1.EvaluationWindow(0)
}

type MoreThanUsualCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *MoreThanUsualCondition) Reset() {
	*x = MoreThanUsualCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoreThanUsualCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoreThanUsualCondition) ProtoMessage() {}

func (x *MoreThanUsualCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoreThanUsualCondition.ProtoReflect.Descriptor instead.
func (*MoreThanUsualCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{4}
}

func (x *MoreThanUsualCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type NewValueCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *NewValueCondition) Reset() {
	*x = NewValueCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewValueCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewValueCondition) ProtoMessage() {}

func (x *NewValueCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewValueCondition.ProtoReflect.Descriptor instead.
func (*NewValueCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{5}
}

func (x *NewValueCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type UniqueCountCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parameters *ConditionParameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *UniqueCountCondition) Reset() {
	*x = UniqueCountCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueCountCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueCountCondition) ProtoMessage() {}

func (x *UniqueCountCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueCountCondition.ProtoReflect.Descriptor instead.
func (*UniqueCountCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{6}
}

func (x *UniqueCountCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type FlowCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stages     []*v1.FlowStage      `protobuf:"bytes,1,rep,name=stages,proto3" json:"stages,omitempty"`
	Parameters *ConditionParameters `protobuf:"bytes,2,opt,name=parameters,proto3,oneof" json:"parameters,omitempty"`
}

func (x *FlowCondition) Reset() {
	*x = FlowCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowCondition) ProtoMessage() {}

func (x *FlowCondition) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowCondition.ProtoReflect.Descriptor instead.
func (*FlowCondition) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{7}
}

func (x *FlowCondition) GetStages() []*v1.FlowStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *FlowCondition) GetParameters() *ConditionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ConditionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold                         *wrapperspb.DoubleValue                  `protobuf:"bytes,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Timeframe                         v1.Timeframe                             `protobuf:"varint,2,opt,name=timeframe,proto3,enum=com.coralogix.alerts.v1.Timeframe" json:"timeframe,omitempty"`
	GroupBy                           []*wrapperspb.StringValue                `protobuf:"bytes,3,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`
	MetricAlertParameters             *v1.MetricAlertConditionParameters       `protobuf:"bytes,4,opt,name=metric_alert_parameters,json=metricAlertParameters,proto3" json:"metric_alert_parameters,omitempty"`
	MetricAlertPromqlParameters       *v1.MetricAlertPromqlConditionParameters `protobuf:"bytes,5,opt,name=metric_alert_promql_parameters,json=metricAlertPromqlParameters,proto3" json:"metric_alert_promql_parameters,omitempty"`
	IgnoreInfinity                    *wrapperspb.BoolValue                    `protobuf:"bytes,6,opt,name=ignore_infinity,json=ignoreInfinity,proto3" json:"ignore_infinity,omitempty"`
	RelativeTimeframe                 v1.RelativeTimeframe                     `protobuf:"varint,7,opt,name=relative_timeframe,json=relativeTimeframe,proto3,enum=com.coralogix.alerts.v1.RelativeTimeframe" json:"relative_timeframe,omitempty"`
	NotifyGroupByOnlyAlerts           *wrapperspb.BoolValue                    `protobuf:"bytes,8,opt,name=notify_group_by_only_alerts,json=notifyGroupByOnlyAlerts,proto3" json:"notify_group_by_only_alerts,omitempty"`
	CardinalityFields                 []*wrapperspb.StringValue                `protobuf:"bytes,10,rep,name=cardinality_fields,json=cardinalityFields,proto3" json:"cardinality_fields,omitempty"`
	MaxUniqueCountValuesForGroupByKey *wrapperspb.UInt32Value                  `protobuf:"bytes,11,opt,name=max_unique_count_values_for_group_by_key,json=maxUniqueCountValuesForGroupByKey,proto3" json:"max_unique_count_values_for_group_by_key,omitempty"`
	RelatedExtendedData               *v1.RelatedExtendedData                  `protobuf:"bytes,12,opt,name=related_extended_data,json=relatedExtendedData,proto3,oneof" json:"related_extended_data,omitempty"`
}

func (x *ConditionParameters) Reset() {
	*x = ConditionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionParameters) ProtoMessage() {}

func (x *ConditionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionParameters.ProtoReflect.Descriptor instead.
func (*ConditionParameters) Descriptor() ([]byte, []int) {
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP(), []int{8}
}

func (x *ConditionParameters) GetThreshold() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *ConditionParameters) GetTimeframe() v1.Timeframe {
	if x != nil {
		return x.Timeframe
	}
	return v1.Timeframe(0)
}

func (x *ConditionParameters) GetGroupBy() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *ConditionParameters) GetMetricAlertParameters() *v1.MetricAlertConditionParameters {
	if x != nil {
		return x.MetricAlertParameters
	}
	return nil
}

func (x *ConditionParameters) GetMetricAlertPromqlParameters() *v1.MetricAlertPromqlConditionParameters {
	if x != nil {
		return x.MetricAlertPromqlParameters
	}
	return nil
}

func (x *ConditionParameters) GetIgnoreInfinity() *wrapperspb.BoolValue {
	if x != nil {
		return x.IgnoreInfinity
	}
	return nil
}

func (x *ConditionParameters) GetRelativeTimeframe() v1.RelativeTimeframe {
	if x != nil {
		return x.RelativeTimeframe
	}
	return v1.RelativeTimeframe(0)
}

func (x *ConditionParameters) GetNotifyGroupByOnlyAlerts() *wrapperspb.BoolValue {
	if x != nil {
		return x.NotifyGroupByOnlyAlerts
	}
	return nil
}

func (x *ConditionParameters) GetCardinalityFields() []*wrapperspb.StringValue {
	if x != nil {
		return x.CardinalityFields
	}
	return nil
}

func (x *ConditionParameters) GetMaxUniqueCountValuesForGroupByKey() *wrapperspb.UInt32Value {
	if x != nil {
		return x.MaxUniqueCountValuesForGroupByKey
	}
	return nil
}

func (x *ConditionParameters) GetRelatedExtendedData() *v1.RelatedExtendedData {
	if x != nil {
		return x.RelatedExtendedData
	}
	return nil
}

var File_com_coralogix_alerts_v2_alert_condition_proto protoreflect.FileDescriptor

var file_com_coralogix_alerts_v2_alert_condition_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb8, 0x04, 0x0a, 0x0e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76,
	0x32, 0x2e, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x12, 0x49, 0x0a, 0x09, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4c,
	0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x49, 0x0a, 0x09,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x59, 0x0a, 0x0f, 0x6d, 0x6f, 0x72, 0x65, 0x5f,
	0x74, 0x68, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x4d, 0x6f, 0x72, 0x65, 0x54,
	0x68, 0x61, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x55, 0x73, 0x75,
	0x61, 0x6c, 0x12, 0x49, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e,
	0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x52, 0x0a, 0x0c, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12,
	0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x11, 0x4c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x48,
	0x00, 0x52, 0x10, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x66, 0x0a, 0x16,
	0x4d, 0x6f, 0x72, 0x65, 0x54, 0x68, 0x61, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x64, 0x0a, 0x14, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x0d, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xfd, 0x07,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x40, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x12, 0x6f, 0x0a, 0x17,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x82, 0x01,
	0x0a, 0x1e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6d,
	0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x1b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x59, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x58, 0x0a, 0x1b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x17, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x12,
	0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x63, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x71, 0x0a, 0x28, 0x6d, 0x61, 0x78,
	0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x6d, 0x61, 0x78, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x65, 0x0a, 0x15,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x2e, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x1d, 0x5a,
	0x1b, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogix_alerts_v2_alert_condition_proto_rawDescOnce sync.Once
	file_com_coralogix_alerts_v2_alert_condition_proto_rawDescData = file_com_coralogix_alerts_v2_alert_condition_proto_rawDesc
)

func file_com_coralogix_alerts_v2_alert_condition_proto_rawDescGZIP() []byte {
	file_com_coralogix_alerts_v2_alert_condition_proto_rawDescOnce.Do(func() {
		file_com_coralogix_alerts_v2_alert_condition_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogix_alerts_v2_alert_condition_proto_rawDescData)
	})
	return file_com_coralogix_alerts_v2_alert_condition_proto_rawDescData
}

var file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_com_coralogix_alerts_v2_alert_condition_proto_goTypes = []interface{}{
	(*AlertCondition)(nil),                          // 0: com.coralogix.alerts.v2.AlertCondition
	(*ImmediateCondition)(nil),                      // 1: com.coralogix.alerts.v2.ImmediateCondition
	(*LessThanCondition)(nil),                       // 2: com.coralogix.alerts.v2.LessThanCondition
	(*MoreThanCondition)(nil),                       // 3: com.coralogix.alerts.v2.MoreThanCondition
	(*MoreThanUsualCondition)(nil),                  // 4: com.coralogix.alerts.v2.MoreThanUsualCondition
	(*NewValueCondition)(nil),                       // 5: com.coralogix.alerts.v2.NewValueCondition
	(*UniqueCountCondition)(nil),                    // 6: com.coralogix.alerts.v2.UniqueCountCondition
	(*FlowCondition)(nil),                           // 7: com.coralogix.alerts.v2.FlowCondition
	(*ConditionParameters)(nil),                     // 8: com.coralogix.alerts.v2.ConditionParameters
	(v1.EvaluationWindow)(0),                        // 9: com.coralogix.alerts.v1.EvaluationWindow
	(*v1.FlowStage)(nil),                            // 10: com.coralogix.alerts.v1.FlowStage
	(*wrapperspb.DoubleValue)(nil),                  // 11: google.protobuf.DoubleValue
	(v1.Timeframe)(0),                               // 12: com.coralogix.alerts.v1.Timeframe
	(*wrapperspb.StringValue)(nil),                  // 13: google.protobuf.StringValue
	(*v1.MetricAlertConditionParameters)(nil),       // 14: com.coralogix.alerts.v1.MetricAlertConditionParameters
	(*v1.MetricAlertPromqlConditionParameters)(nil), // 15: com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters
	(*wrapperspb.BoolValue)(nil),                    // 16: google.protobuf.BoolValue
	(v1.RelativeTimeframe)(0),                       // 17: com.coralogix.alerts.v1.RelativeTimeframe
	(*wrapperspb.UInt32Value)(nil),                  // 18: google.protobuf.UInt32Value
	(*v1.RelatedExtendedData)(nil),                  // 19: com.coralogix.alerts.v1.RelatedExtendedData
}
var file_com_coralogix_alerts_v2_alert_condition_proto_depIdxs = []int32{
	1,  // 0: com.coralogix.alerts.v2.AlertCondition.immediate:type_name -> com.coralogix.alerts.v2.ImmediateCondition
	2,  // 1: com.coralogix.alerts.v2.AlertCondition.less_than:type_name -> com.coralogix.alerts.v2.LessThanCondition
	3,  // 2: com.coralogix.alerts.v2.AlertCondition.more_than:type_name -> com.coralogix.alerts.v2.MoreThanCondition
	4,  // 3: com.coralogix.alerts.v2.AlertCondition.more_than_usual:type_name -> com.coralogix.alerts.v2.MoreThanUsualCondition
	5,  // 4: com.coralogix.alerts.v2.AlertCondition.new_value:type_name -> com.coralogix.alerts.v2.NewValueCondition
	7,  // 5: com.coralogix.alerts.v2.AlertCondition.flow:type_name -> com.coralogix.alerts.v2.FlowCondition
	6,  // 6: com.coralogix.alerts.v2.AlertCondition.unique_count:type_name -> com.coralogix.alerts.v2.UniqueCountCondition
	8,  // 7: com.coralogix.alerts.v2.LessThanCondition.parameters:type_name -> com.coralogix.alerts.v2.ConditionParameters
	8,  // 8: com.coralogix.alerts.v2.MoreThanCondition.parameters:type_name -> com.coralogix.alerts.v2.ConditionParameters
	9,  // 9: com.coralogix.alerts.v2.MoreThanCondition.evaluation_window:type_name -> com.coralogix.alerts.v1.EvaluationWindow
	8,  // 10: com.coralogix.alerts.v2.MoreThanUsualCondition.parameters:type_name -> com.coralogix.alerts.v2.ConditionParameters
	8,  // 11: com.coralogix.alerts.v2.NewValueCondition.parameters:type_name -> com.coralogix.alerts.v2.ConditionParameters
	8,  // 12: com.coralogix.alerts.v2.UniqueCountCondition.parameters:type_name -> com.coralogix.alerts.v2.ConditionParameters
	10, // 13: com.coralogix.alerts.v2.FlowCondition.stages:type_name -> com.coralogix.alerts.v1.FlowStage
	8,  // 14: com.coralogix.alerts.v2.FlowCondition.parameters:type_name -> com.coralogix.alerts.v2.ConditionParameters
	11, // 15: com.coralogix.alerts.v2.ConditionParameters.threshold:type_name -> google.protobuf.DoubleValue
	12, // 16: com.coralogix.alerts.v2.ConditionParameters.timeframe:type_name -> com.coralogix.alerts.v1.Timeframe
	13, // 17: com.coralogix.alerts.v2.ConditionParameters.group_by:type_name -> google.protobuf.StringValue
	14, // 18: com.coralogix.alerts.v2.ConditionParameters.metric_alert_parameters:type_name -> com.coralogix.alerts.v1.MetricAlertConditionParameters
	15, // 19: com.coralogix.alerts.v2.ConditionParameters.metric_alert_promql_parameters:type_name -> com.coralogix.alerts.v1.MetricAlertPromqlConditionParameters
	16, // 20: com.coralogix.alerts.v2.ConditionParameters.ignore_infinity:type_name -> google.protobuf.BoolValue
	17, // 21: com.coralogix.alerts.v2.ConditionParameters.relative_timeframe:type_name -> com.coralogix.alerts.v1.RelativeTimeframe
	16, // 22: com.coralogix.alerts.v2.ConditionParameters.notify_group_by_only_alerts:type_name -> google.protobuf.BoolValue
	13, // 23: com.coralogix.alerts.v2.ConditionParameters.cardinality_fields:type_name -> google.protobuf.StringValue
	18, // 24: com.coralogix.alerts.v2.ConditionParameters.max_unique_count_values_for_group_by_key:type_name -> google.protobuf.UInt32Value
	19, // 25: com.coralogix.alerts.v2.ConditionParameters.related_extended_data:type_name -> com.coralogix.alerts.v1.RelatedExtendedData
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_com_coralogix_alerts_v2_alert_condition_proto_init() }
func file_com_coralogix_alerts_v2_alert_condition_proto_init() {
	if File_com_coralogix_alerts_v2_alert_condition_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmediateCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LessThanCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoreThanCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoreThanUsualCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewValueCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueCountCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*AlertCondition_Immediate)(nil),
		(*AlertCondition_LessThan)(nil),
		(*AlertCondition_MoreThan)(nil),
		(*AlertCondition_MoreThanUsual)(nil),
		(*AlertCondition_NewValue)(nil),
		(*AlertCondition_Flow)(nil),
		(*AlertCondition_UniqueCount)(nil),
	}
	file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogix_alerts_v2_alert_condition_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_coralogix_alerts_v2_alert_condition_proto_goTypes,
		DependencyIndexes: file_com_coralogix_alerts_v2_alert_condition_proto_depIdxs,
		MessageInfos:      file_com_coralogix_alerts_v2_alert_condition_proto_msgTypes,
	}.Build()
	File_com_coralogix_alerts_v2_alert_condition_proto = out.File
	file_com_coralogix_alerts_v2_alert_condition_proto_rawDesc = nil
	file_com_coralogix_alerts_v2_alert_condition_proto_goTypes = nil
	file_com_coralogix_alerts_v2_alert_condition_proto_depIdxs = nil
}
