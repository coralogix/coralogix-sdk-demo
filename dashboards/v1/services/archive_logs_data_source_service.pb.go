// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.8
// source: com/coralogixapis/dashboards/v1/services/archive_logs_data_source_service.proto

package services

import (
	_ "com/coralogixapis/dashboards/v1"
	common "com/coralogixapis/dashboards/v1/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchArchiveLogsTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue          `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *common.TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	Limit             *wrapperspb.Int32Value           `protobuf:"bytes,7,opt,name=limit,proto3" json:"limit,omitempty"`
	RequestParamsHash *wrapperspb.StringValue          `protobuf:"bytes,9,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *common.SerializedDataprimeQuery `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *common.DataprimeQuery           `protobuf:"bytes,11,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	AggregationKeys   []*wrapperspb.StringValue        `protobuf:"bytes,12,rep,name=aggregation_keys,json=aggregationKeys,proto3" json:"aggregation_keys,omitempty"`
}

func (x *SearchArchiveLogsTimeSeriesRequest) Reset() {
	*x = SearchArchiveLogsTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveLogsTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveLogsTimeSeriesRequest) ProtoMessage() {}

func (x *SearchArchiveLogsTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveLogsTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveLogsTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{0}
}

func (x *SearchArchiveLogsTimeSeriesRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveLogsTimeSeriesRequest) GetTimeFrame() *common.TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveLogsTimeSeriesRequest) GetLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *SearchArchiveLogsTimeSeriesRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveLogsTimeSeriesRequest) GetQuery() *common.SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveLogsTimeSeriesRequest) GetQueryRaw() *common.DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveLogsTimeSeriesRequest) GetAggregationKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKeys
	}
	return nil
}

type SearchArchiveLogsTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeSeries []*common.TimeSeries   `protobuf:"bytes,1,rep,name=time_series,json=timeSeries,proto3" json:"time_series,omitempty"`
	Total      *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchArchiveLogsTimeSeriesResponse) Reset() {
	*x = SearchArchiveLogsTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveLogsTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveLogsTimeSeriesResponse) ProtoMessage() {}

func (x *SearchArchiveLogsTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveLogsTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveLogsTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{1}
}

func (x *SearchArchiveLogsTimeSeriesResponse) GetTimeSeries() []*common.TimeSeries {
	if x != nil {
		return x.TimeSeries
	}
	return nil
}

func (x *SearchArchiveLogsTimeSeriesResponse) GetTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.Total
	}
	return nil
}

type SearchArchiveLogsEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId                    *wrapperspb.StringValue          `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame                   *common.TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	Pagination                  *common.Pagination               `protobuf:"bytes,6,opt,name=pagination,proto3" json:"pagination,omitempty"`
	RequestParamsHash           *wrapperspb.StringValue          `protobuf:"bytes,7,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query                       *common.SerializedDataprimeQuery `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw                    *common.DataprimeQuery           `protobuf:"bytes,9,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	TotalCountRequestParamsHash *wrapperspb.StringValue          `protobuf:"bytes,10,opt,name=total_count_request_params_hash,json=totalCountRequestParamsHash,proto3" json:"total_count_request_params_hash,omitempty"`
	TotalCountQuery             *common.SerializedDataprimeQuery `protobuf:"bytes,11,opt,name=total_count_query,json=totalCountQuery,proto3" json:"total_count_query,omitempty"`
	TotalCountQueryRaw          *common.DataprimeQuery           `protobuf:"bytes,12,opt,name=total_count_query_raw,json=totalCountQueryRaw,proto3" json:"total_count_query_raw,omitempty"`
}

func (x *SearchArchiveLogsEventsRequest) Reset() {
	*x = SearchArchiveLogsEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveLogsEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveLogsEventsRequest) ProtoMessage() {}

func (x *SearchArchiveLogsEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveLogsEventsRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveLogsEventsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{2}
}

func (x *SearchArchiveLogsEventsRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveLogsEventsRequest) GetTimeFrame() *common.TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveLogsEventsRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchArchiveLogsEventsRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveLogsEventsRequest) GetQuery() *common.SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveLogsEventsRequest) GetQueryRaw() *common.DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveLogsEventsRequest) GetTotalCountRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.TotalCountRequestParamsHash
	}
	return nil
}

func (x *SearchArchiveLogsEventsRequest) GetTotalCountQuery() *common.SerializedDataprimeQuery {
	if x != nil {
		return x.TotalCountQuery
	}
	return nil
}

func (x *SearchArchiveLogsEventsRequest) GetTotalCountQueryRaw() *common.DataprimeQuery {
	if x != nil {
		return x.TotalCountQueryRaw
	}
	return nil
}

type SearchArchiveLogsEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*ArchiveLogsEvent    `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Total  *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *SearchArchiveLogsEventsResponse) Reset() {
	*x = SearchArchiveLogsEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveLogsEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveLogsEventsResponse) ProtoMessage() {}

func (x *SearchArchiveLogsEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveLogsEventsResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveLogsEventsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{3}
}

func (x *SearchArchiveLogsEventsResponse) GetEvents() []*ArchiveLogsEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *SearchArchiveLogsEventsResponse) GetTotal() *wrapperspb.Int64Value {
	if x != nil {
		return x.Total
	}
	return nil
}

type ArchiveLogsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metadata  map[string]string      `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Labels    map[string]string      `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserData  *structpb.Struct       `protobuf:"bytes,4,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
}

func (x *ArchiveLogsEvent) Reset() {
	*x = ArchiveLogsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArchiveLogsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveLogsEvent) ProtoMessage() {}

func (x *ArchiveLogsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveLogsEvent.ProtoReflect.Descriptor instead.
func (*ArchiveLogsEvent) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{4}
}

func (x *ArchiveLogsEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ArchiveLogsEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ArchiveLogsEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ArchiveLogsEvent) GetUserData() *structpb.Struct {
	if x != nil {
		return x.UserData
	}
	return nil
}

type SearchArchiveLogsEventGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue          `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *common.TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue          `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *common.SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *common.DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	GroupByKeys       []*wrapperspb.StringValue        `protobuf:"bytes,6,rep,name=group_by_keys,json=groupByKeys,proto3" json:"group_by_keys,omitempty"`
	AggregationKeys   []*wrapperspb.StringValue        `protobuf:"bytes,7,rep,name=aggregation_keys,json=aggregationKeys,proto3" json:"aggregation_keys,omitempty"`
	Pagination        *common.Pagination               `protobuf:"bytes,8,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *SearchArchiveLogsEventGroupsRequest) Reset() {
	*x = SearchArchiveLogsEventGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveLogsEventGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveLogsEventGroupsRequest) ProtoMessage() {}

func (x *SearchArchiveLogsEventGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveLogsEventGroupsRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveLogsEventGroupsRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{5}
}

func (x *SearchArchiveLogsEventGroupsRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveLogsEventGroupsRequest) GetTimeFrame() *common.TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveLogsEventGroupsRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveLogsEventGroupsRequest) GetQuery() *common.SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveLogsEventGroupsRequest) GetQueryRaw() *common.DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveLogsEventGroupsRequest) GetGroupByKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

func (x *SearchArchiveLogsEventGroupsRequest) GetAggregationKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKeys
	}
	return nil
}

func (x *SearchArchiveLogsEventGroupsRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type SearchArchiveLogsEventGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*common.MultiGroup `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *SearchArchiveLogsEventGroupsResponse) Reset() {
	*x = SearchArchiveLogsEventGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveLogsEventGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveLogsEventGroupsResponse) ProtoMessage() {}

func (x *SearchArchiveLogsEventGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveLogsEventGroupsResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveLogsEventGroupsResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{6}
}

func (x *SearchArchiveLogsEventGroupsResponse) GetGroups() []*common.MultiGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SearchArchiveGroupedLogsSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue          `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *common.TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue          `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *common.SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *common.DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	GroupByKeys       []*wrapperspb.StringValue        `protobuf:"bytes,6,rep,name=group_by_keys,json=groupByKeys,proto3" json:"group_by_keys,omitempty"` // Have to be ordered for correctly structured results.
	AggregationKey    *wrapperspb.StringValue          `protobuf:"bytes,7,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
	Limits            []*common.GroupLimit             `protobuf:"bytes,8,rep,name=limits,proto3" json:"limits,omitempty"`
}

func (x *SearchArchiveGroupedLogsSeriesRequest) Reset() {
	*x = SearchArchiveGroupedLogsSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveGroupedLogsSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveGroupedLogsSeriesRequest) ProtoMessage() {}

func (x *SearchArchiveGroupedLogsSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveGroupedLogsSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveGroupedLogsSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{7}
}

func (x *SearchArchiveGroupedLogsSeriesRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveGroupedLogsSeriesRequest) GetTimeFrame() *common.TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveGroupedLogsSeriesRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveGroupedLogsSeriesRequest) GetQuery() *common.SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveGroupedLogsSeriesRequest) GetQueryRaw() *common.DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveGroupedLogsSeriesRequest) GetGroupByKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

func (x *SearchArchiveGroupedLogsSeriesRequest) GetAggregationKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKey
	}
	return nil
}

func (x *SearchArchiveGroupedLogsSeriesRequest) GetLimits() []*common.GroupLimit {
	if x != nil {
		return x.Limits
	}
	return nil
}

type SearchArchiveGroupedLogsSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series []*common.GroupedSeries `protobuf:"bytes,1,rep,name=series,proto3" json:"series,omitempty"`
}

func (x *SearchArchiveGroupedLogsSeriesResponse) Reset() {
	*x = SearchArchiveGroupedLogsSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveGroupedLogsSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveGroupedLogsSeriesResponse) ProtoMessage() {}

func (x *SearchArchiveGroupedLogsSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveGroupedLogsSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveGroupedLogsSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{8}
}

func (x *SearchArchiveGroupedLogsSeriesResponse) GetSeries() []*common.GroupedSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

// Assumes timestamp is aliased to `timestamp` in the results.
type SearchArchiveGroupedLogsTimeSeriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue          `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *common.TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue          `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *common.SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *common.DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	GroupByKeys       []*wrapperspb.StringValue        `protobuf:"bytes,6,rep,name=group_by_keys,json=groupByKeys,proto3" json:"group_by_keys,omitempty"` // Expects up to 1 element for now, without `timestamp`.
	AggregationKey    *wrapperspb.StringValue          `protobuf:"bytes,7,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
	Limits            []*common.GroupLimit             `protobuf:"bytes,8,rep,name=limits,proto3" json:"limits,omitempty"`
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) Reset() {
	*x = SearchArchiveGroupedLogsTimeSeriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveGroupedLogsTimeSeriesRequest) ProtoMessage() {}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveGroupedLogsTimeSeriesRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveGroupedLogsTimeSeriesRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{9}
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) GetTimeFrame() *common.TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) GetQuery() *common.SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) GetQueryRaw() *common.DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) GetGroupByKeys() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupByKeys
	}
	return nil
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) GetAggregationKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKey
	}
	return nil
}

func (x *SearchArchiveGroupedLogsTimeSeriesRequest) GetLimits() []*common.GroupLimit {
	if x != nil {
		return x.Limits
	}
	return nil
}

type SearchArchiveGroupedLogsTimeSeriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Series *common.GroupedSeries `protobuf:"bytes,1,opt,name=series,proto3" json:"series,omitempty"`
}

func (x *SearchArchiveGroupedLogsTimeSeriesResponse) Reset() {
	*x = SearchArchiveGroupedLogsTimeSeriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveGroupedLogsTimeSeriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveGroupedLogsTimeSeriesResponse) ProtoMessage() {}

func (x *SearchArchiveGroupedLogsTimeSeriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveGroupedLogsTimeSeriesResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveGroupedLogsTimeSeriesResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{10}
}

func (x *SearchArchiveGroupedLogsTimeSeriesResponse) GetSeries() *common.GroupedSeries {
	if x != nil {
		return x.Series
	}
	return nil
}

type SearchArchiveLogsTimeValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WidgetId          *wrapperspb.StringValue          `protobuf:"bytes,1,opt,name=widget_id,json=widgetId,proto3" json:"widget_id,omitempty"`
	TimeFrame         *common.TimeFrame                `protobuf:"bytes,2,opt,name=time_frame,json=timeFrame,proto3" json:"time_frame,omitempty"`
	RequestParamsHash *wrapperspb.StringValue          `protobuf:"bytes,3,opt,name=request_params_hash,json=requestParamsHash,proto3" json:"request_params_hash,omitempty"`
	Query             *common.SerializedDataprimeQuery `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	QueryRaw          *common.DataprimeQuery           `protobuf:"bytes,5,opt,name=query_raw,json=queryRaw,proto3" json:"query_raw,omitempty"`
	AggregationKey    *wrapperspb.StringValue          `protobuf:"bytes,6,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
}

func (x *SearchArchiveLogsTimeValueRequest) Reset() {
	*x = SearchArchiveLogsTimeValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveLogsTimeValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveLogsTimeValueRequest) ProtoMessage() {}

func (x *SearchArchiveLogsTimeValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveLogsTimeValueRequest.ProtoReflect.Descriptor instead.
func (*SearchArchiveLogsTimeValueRequest) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{11}
}

func (x *SearchArchiveLogsTimeValueRequest) GetWidgetId() *wrapperspb.StringValue {
	if x != nil {
		return x.WidgetId
	}
	return nil
}

func (x *SearchArchiveLogsTimeValueRequest) GetTimeFrame() *common.TimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return nil
}

func (x *SearchArchiveLogsTimeValueRequest) GetRequestParamsHash() *wrapperspb.StringValue {
	if x != nil {
		return x.RequestParamsHash
	}
	return nil
}

func (x *SearchArchiveLogsTimeValueRequest) GetQuery() *common.SerializedDataprimeQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchArchiveLogsTimeValueRequest) GetQueryRaw() *common.DataprimeQuery {
	if x != nil {
		return x.QueryRaw
	}
	return nil
}

func (x *SearchArchiveLogsTimeValueRequest) GetAggregationKey() *wrapperspb.StringValue {
	if x != nil {
		return x.AggregationKey
	}
	return nil
}

type SearchArchiveLogsTimeValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SearchArchiveLogsTimeValueResponse) Reset() {
	*x = SearchArchiveLogsTimeValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchArchiveLogsTimeValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchArchiveLogsTimeValueResponse) ProtoMessage() {}

func (x *SearchArchiveLogsTimeValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchArchiveLogsTimeValueResponse.ProtoReflect.Descriptor instead.
func (*SearchArchiveLogsTimeValueResponse) Descriptor() ([]byte, []int) {
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP(), []int{12}
}

func (x *SearchArchiveLogsTimeValueResponse) GetValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto protoreflect.FileDescriptor

var file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDesc = []byte{
	0x0a, 0x4f, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x2f, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x38, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x32, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x04, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4c, 0x0a,
	0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x12, 0x47, 0x0a, 0x10, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x73, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22,
	0xad, 0x01, 0x0a, 0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xcb, 0x06, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x52, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f,
	0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x12, 0x62,
	0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x6c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x69, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69,
	0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xa8, 0x01,
	0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc0, 0x03, 0x0a, 0x10, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x64, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x4c, 0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x05, 0x0a, 0x23,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77, 0x12, 0x40, 0x0a, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x47, 0x0a,
	0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x52, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64,
	0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x24, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x84,
	0x05, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x77, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x53, 0x0a, 0x09, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72, 0x69, 0x6d,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x61, 0x77,
	0x12, 0x40, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x06, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x67,
	0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x88,
	0x05, 0x0a, 0x29, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x61, 0x77, 0x12, 0x40, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x42, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a,
	0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x2a, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f,
	0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0xf2, 0x03, 0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77,
	0x69, 0x64, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x56, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x70, 0x72,
	0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x53, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x70, 0x72, 0x69, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x61, 0x77, 0x12, 0x45, 0x0a, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x22, 0x58, 0x0a, 0x22, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x94, 0x0b, 0x0a, 0x1c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x4c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xe1, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c,
	0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0xba, 0xb8, 0x02, 0x21, 0x0a, 0x1f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x17, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72,
	0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x49, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0xba, 0xb8, 0x02,
	0x1c, 0x0a, 0x1a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0xe5, 0x01,
	0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0xba,
	0xb8, 0x02, 0x22, 0x0a, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0xed, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x73, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63,
	0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73,
	0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x50, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61,
	0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0xba, 0xb8, 0x02,
	0x24, 0x0a, 0x22, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0xfe, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x53, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x54, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69,
	0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0xba, 0xb8, 0x02, 0x29, 0x0a, 0x27, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0xe3, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x54, 0x69, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61,
	0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f,
	0x67, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67,
	0x69, 0x78, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2a, 0xba, 0xb8, 0x02, 0x26, 0x0a, 0x24, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x20, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x20, 0x6c, 0x6f, 0x67, 0x73, 0x20, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x2a, 0x5a, 0x28,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x6f, 0x67, 0x69, 0x78, 0x61, 0x70, 0x69,
	0x73, 0x2f, 0x64, 0x61, 0x73, 0x68, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescOnce sync.Once
	file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescData = file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDesc
)

func file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescGZIP() []byte {
	file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescOnce.Do(func() {
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescData)
	})
	return file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDescData
}

var file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_goTypes = []interface{}{
	(*SearchArchiveLogsTimeSeriesRequest)(nil),         // 0: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest
	(*SearchArchiveLogsTimeSeriesResponse)(nil),        // 1: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesResponse
	(*SearchArchiveLogsEventsRequest)(nil),             // 2: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest
	(*SearchArchiveLogsEventsResponse)(nil),            // 3: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsResponse
	(*ArchiveLogsEvent)(nil),                           // 4: com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent
	(*SearchArchiveLogsEventGroupsRequest)(nil),        // 5: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest
	(*SearchArchiveLogsEventGroupsResponse)(nil),       // 6: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsResponse
	(*SearchArchiveGroupedLogsSeriesRequest)(nil),      // 7: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest
	(*SearchArchiveGroupedLogsSeriesResponse)(nil),     // 8: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesResponse
	(*SearchArchiveGroupedLogsTimeSeriesRequest)(nil),  // 9: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest
	(*SearchArchiveGroupedLogsTimeSeriesResponse)(nil), // 10: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesResponse
	(*SearchArchiveLogsTimeValueRequest)(nil),          // 11: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueRequest
	(*SearchArchiveLogsTimeValueResponse)(nil),         // 12: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueResponse
	nil,                                     // 13: com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent.MetadataEntry
	nil,                                     // 14: com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent.LabelsEntry
	(*wrapperspb.StringValue)(nil),          // 15: google.protobuf.StringValue
	(*common.TimeFrame)(nil),                // 16: com.coralogixapis.dashboards.v1.common.TimeFrame
	(*wrapperspb.Int32Value)(nil),           // 17: google.protobuf.Int32Value
	(*common.SerializedDataprimeQuery)(nil), // 18: com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	(*common.DataprimeQuery)(nil),           // 19: com.coralogixapis.dashboards.v1.common.DataprimeQuery
	(*common.TimeSeries)(nil),               // 20: com.coralogixapis.dashboards.v1.common.TimeSeries
	(*wrapperspb.Int64Value)(nil),           // 21: google.protobuf.Int64Value
	(*common.Pagination)(nil),               // 22: com.coralogixapis.dashboards.v1.common.Pagination
	(*timestamppb.Timestamp)(nil),           // 23: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                 // 24: google.protobuf.Struct
	(*common.MultiGroup)(nil),               // 25: com.coralogixapis.dashboards.v1.common.MultiGroup
	(*common.GroupLimit)(nil),               // 26: com.coralogixapis.dashboards.v1.common.GroupLimit
	(*common.GroupedSeries)(nil),            // 27: com.coralogixapis.dashboards.v1.common.GroupedSeries
	(*wrapperspb.DoubleValue)(nil),          // 28: google.protobuf.DoubleValue
}
var file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_depIdxs = []int32{
	15, // 0: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest.widget_id:type_name -> google.protobuf.StringValue
	16, // 1: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	17, // 2: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest.limit:type_name -> google.protobuf.Int32Value
	15, // 3: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest.request_params_hash:type_name -> google.protobuf.StringValue
	18, // 4: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	19, // 5: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	15, // 6: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest.aggregation_keys:type_name -> google.protobuf.StringValue
	20, // 7: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesResponse.time_series:type_name -> com.coralogixapis.dashboards.v1.common.TimeSeries
	21, // 8: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesResponse.total:type_name -> google.protobuf.Int64Value
	15, // 9: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.widget_id:type_name -> google.protobuf.StringValue
	16, // 10: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	22, // 11: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.pagination:type_name -> com.coralogixapis.dashboards.v1.common.Pagination
	15, // 12: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.request_params_hash:type_name -> google.protobuf.StringValue
	18, // 13: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	19, // 14: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	15, // 15: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.total_count_request_params_hash:type_name -> google.protobuf.StringValue
	18, // 16: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.total_count_query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	19, // 17: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest.total_count_query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	4,  // 18: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsResponse.events:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent
	21, // 19: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsResponse.total:type_name -> google.protobuf.Int64Value
	23, // 20: com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent.timestamp:type_name -> google.protobuf.Timestamp
	13, // 21: com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent.metadata:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent.MetadataEntry
	14, // 22: com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent.labels:type_name -> com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent.LabelsEntry
	24, // 23: com.coralogixapis.dashboards.v1.services.ArchiveLogsEvent.user_data:type_name -> google.protobuf.Struct
	15, // 24: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest.widget_id:type_name -> google.protobuf.StringValue
	16, // 25: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	15, // 26: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest.request_params_hash:type_name -> google.protobuf.StringValue
	18, // 27: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	19, // 28: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	15, // 29: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest.group_by_keys:type_name -> google.protobuf.StringValue
	15, // 30: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest.aggregation_keys:type_name -> google.protobuf.StringValue
	22, // 31: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest.pagination:type_name -> com.coralogixapis.dashboards.v1.common.Pagination
	25, // 32: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsResponse.groups:type_name -> com.coralogixapis.dashboards.v1.common.MultiGroup
	15, // 33: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest.widget_id:type_name -> google.protobuf.StringValue
	16, // 34: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	15, // 35: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest.request_params_hash:type_name -> google.protobuf.StringValue
	18, // 36: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	19, // 37: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	15, // 38: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest.group_by_keys:type_name -> google.protobuf.StringValue
	15, // 39: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest.aggregation_key:type_name -> google.protobuf.StringValue
	26, // 40: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest.limits:type_name -> com.coralogixapis.dashboards.v1.common.GroupLimit
	27, // 41: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesResponse.series:type_name -> com.coralogixapis.dashboards.v1.common.GroupedSeries
	15, // 42: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest.widget_id:type_name -> google.protobuf.StringValue
	16, // 43: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	15, // 44: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest.request_params_hash:type_name -> google.protobuf.StringValue
	18, // 45: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	19, // 46: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	15, // 47: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest.group_by_keys:type_name -> google.protobuf.StringValue
	15, // 48: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest.aggregation_key:type_name -> google.protobuf.StringValue
	26, // 49: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest.limits:type_name -> com.coralogixapis.dashboards.v1.common.GroupLimit
	27, // 50: com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesResponse.series:type_name -> com.coralogixapis.dashboards.v1.common.GroupedSeries
	15, // 51: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueRequest.widget_id:type_name -> google.protobuf.StringValue
	16, // 52: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueRequest.time_frame:type_name -> com.coralogixapis.dashboards.v1.common.TimeFrame
	15, // 53: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueRequest.request_params_hash:type_name -> google.protobuf.StringValue
	18, // 54: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueRequest.query:type_name -> com.coralogixapis.dashboards.v1.common.SerializedDataprimeQuery
	19, // 55: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueRequest.query_raw:type_name -> com.coralogixapis.dashboards.v1.common.DataprimeQuery
	15, // 56: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueRequest.aggregation_key:type_name -> google.protobuf.StringValue
	28, // 57: com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueResponse.value:type_name -> google.protobuf.DoubleValue
	0,  // 58: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveLogsTimeSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesRequest
	2,  // 59: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveLogsEvents:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsRequest
	5,  // 60: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveLogsEventGroups:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsRequest
	7,  // 61: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveGroupedLogsSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesRequest
	9,  // 62: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveGroupedLogsTimeSeries:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesRequest
	11, // 63: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveLogsTimeValue:input_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueRequest
	1,  // 64: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveLogsTimeSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeSeriesResponse
	3,  // 65: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveLogsEvents:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventsResponse
	6,  // 66: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveLogsEventGroups:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveLogsEventGroupsResponse
	8,  // 67: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveGroupedLogsSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsSeriesResponse
	10, // 68: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveGroupedLogsTimeSeries:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveGroupedLogsTimeSeriesResponse
	12, // 69: com.coralogixapis.dashboards.v1.services.ArchiveLogsDataSourceService.SearchArchiveLogsTimeValue:output_type -> com.coralogixapis.dashboards.v1.services.SearchArchiveLogsTimeValueResponse
	64, // [64:70] is the sub-list for method output_type
	58, // [58:64] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() {
	file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_init()
}
func file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_init() {
	if File_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveLogsTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveLogsTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveLogsEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveLogsEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArchiveLogsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveLogsEventGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveLogsEventGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveGroupedLogsSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveGroupedLogsSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveGroupedLogsTimeSeriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveGroupedLogsTimeSeriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveLogsTimeValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchArchiveLogsTimeValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_goTypes,
		DependencyIndexes: file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_depIdxs,
		MessageInfos:      file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_msgTypes,
	}.Build()
	File_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto = out.File
	file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_rawDesc = nil
	file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_goTypes = nil
	file_com_coralogixapis_dashboards_v1_services_archive_logs_data_source_service_proto_depIdxs = nil
}
